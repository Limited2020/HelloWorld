Attribute VB_Name = "VBT_basic_PartialGood_XXXX"
Option Explicit

''=====================================
''   Partial Good Flag Sturcture Definition
''=====================================

Public Type Type_PartialGood_Flag
    cItemName As String
    iValue As New SiteLong
End Type

Public CurrentFlowPGPassFlag As Type_PartialGood_Flag
Public PreCheckFlowPGPassFlag As Type_PartialGood_Flag
Public CurrentFlowModulePassFlag() As Type_PartialGood_Flag
Public PreCheckFlowModulePassFlag() As Type_PartialGood_Flag
Public FlowModuleFlag() As Type_PartialGood_Flag


''=====================================
''   Partial Good Sturcture Definition
''=====================================

Type PG_Info_Structure
    WGL_Name() As String
    PG_Type() As String
    IncludeModule() As String
    Pin_Cycle_Array() As String
End Type

Global PG_Info  As PG_Info_Structure

'Use Dictionary to quickly find pattern index, key is wgl name in PG_Info work sheet, item is index
Global FindPatternIndex_Dct As New Dictionary

'Use Dictionary to quickly find module index, key is module name defined in global const string, item is index
Global FindModuleIndex_Dct As New Dictionary

'User can modify PG module name in this string, PG result for each module is stored in DSPwave reference to the order in this string
Global Const USER_DEFINE_MODULENAME As String = "DSP0/DSP1/DSP2/DSP3/FFT0/FFT1/SAMP0/SAMP1"
'User define these string const accroding to the PG Rules,it should be included in USER_DEFINE_MODULENAME,used for PG bining
Global Const USER_DEFINE_DSPSCluster As String = "DSP0/DSP1/DSP2/DSP3"
Global Const USER_DEFINE_FFTCluster As String = "FFT0/FFT1"
Global Const USER_DEFINE_SAMPCluster As String = "SAMP0/SAMP1"


Global glb_PG_FlowResult_Dspwave As New DSPWave
Global glb_PG_FlowResult_AVS_Dspwave As New DSPWave
Global glb_Module_Count As Long
Global glb_PG_DebugMode As Boolean
Global glb_PGFirstFail_Flag_SBool As New SiteBoolean      'Init False, record if the first fail is found, if found then glb_PGFirstFail_Flag_SBool=True
Global glb_PGFirstFail_UpdateDone_SBool As New SiteBoolean
Global glb_PGFisrtFail_BinNum_SLng As New SiteLong       'Record the first found BinNum
Global glb_PGFisrtFail_SortNum_SLng As New SiteLong      'Record the first found SortNum
Public PG_Judge_Slng As New SiteLong   '''Used In postJudge for datalog print
Global glb_IsPGInfoLoaded_Bool As Boolean

'''the value assignment of next two global elment is not fix,because AVS process hasn't fix,it's temp for engineer program  20200316 Sean
Global glb_PG_GRD_Sdbl As New SiteDouble
Global glb_PWR_GRD_Sdbl As New SiteDouble
Public PGCaredModule_Result_SBool As New SiteBoolean
Public AVS_Enable As Boolean                    ''set true in AVS test,stands for whether is AVS test
Public AVS_LP_Enable_SBool As New SiteBoolean   ''set true in AVS LP process
Public AVS_HP_Enable_SBool As New SiteBoolean   ''set true in AVS HP process
Public H_PWR_FLag_PG As New SiteBoolean
Public glb_BinOut_Enable As New SiteBoolean     ''set true when need to bin out, haven't been used yet

'''Dec For DVS bin 5 requirement,temp
Public glb_ModuleFailCount_BeforeDVS_slng As New SiteLong                   'Used to count the total number of failed modules before DVS
Public glb_ModuleFailCount_AfterDVS_slng As New SiteLong                    'Used to count the total number of failed modules after DVS
Public glb_UpdateBinNumerAfterDVSDone_sbool As New SiteBoolean              'Used to mark the action of updating binnumber after DVS
'Public glb_DFTRetestAfterDVS_sbool As New SiteBoolean                       'Used to mark the start and end of DFT test after DVS
Public glb_PG_DVSFirstFail_Flag_SBool As New SiteBoolean                    'Init False, record if the first fail Module of PostDVS is found, if found then glb_PG_DVSFirstFail_Flag_SBool=True
Public glb_PG_DVS_FisrtFail_BinNum_SLng As New SiteLong       'Record the first found BinNum in PostDVS
Public glb_PG_DVS_FisrtFail_SortNum_SLng As New SiteLong      'Record the first found SortNum in PostDVS


'''''''For DVS FLOW Only
Public Function PG_CalcModuleFailCountBeforeDVS_vbt() As Long

    On Error GoTo errHandler
'''''''''''''''''''
'Executed as a test item after DVS only in CPB_L40C flow,used to count the total number of failed modules for each pattern before DVS
'Test item execution condition is controlled by Flow Flag,which is DVS_FALG_ZORE=True

    Dim Site As Variant
    Dim tempPG_Dspwave_beforeDVS As New DSPWave
    Dim idx_Module As Long
    Dim i As Long
    Dim tempLocalDspwave As New DSPWave
    
    glb_ModuleFailCount_BeforeDVS_slng = 0
    
    
    For Each Site In TheExec.Sites
        tempPG_Dspwave_beforeDVS = glb_PG_FlowResult_Dspwave.Copy
        tempPG_Dspwave_beforeDVS = tempPG_Dspwave_beforeDVS.Select(glb_Module_Count + 2, 1, -1)           ''remove the inital dummy element
        For idx_Module = 0 To glb_Module_Count - 1
            tempLocalDspwave = tempPG_Dspwave_beforeDVS.Select(idx_Module, glb_Module_Count + 2, -1)
            glb_ModuleFailCount_BeforeDVS_slng = glb_ModuleFailCount_BeforeDVS_slng + tempLocalDspwave.CountElements(EqualTo, 0)
        Next idx_Module
        
        'glb_DFTRetestAfterDVS_sbool = True
        'the next part will be the DFT retest after DVS,and begin to record bin5,so set glb_DFTRetestAfterDVS_sbool to true
    Next Site

    Exit Function
errHandler:
    If AbortTest Then Exit Function Else Resume Next
End Function


'''''''For DVS FLOW Only
Public Function PG_CalcModuleFailCountAfterDVS(inLocalDspwave As DSPWave, inSortNumber_lng As Long) As Long


'''this function should be added at the end of every post pattern function, but it has three execution conditions
'''condition1: current flow should be DVS Flow
'''condition2: DVS_FALG_ZORE=True ,means DVS fresh
'''condition3: Testnumber should start with 5, indicating hardbin 5
'''condition4: glb_UpdateBinNumerAfterDVSDone_sbool=false

''glb_ModuleFailCount_AfterDVS_slng will be updated after every PG test
''When glb_ModuleFailCount_AfterDVS_slng is larger than glb_ModuleFailCount_BeforeDVS_slng,means some module is failed because of DVS,than bin number will be updated and locked

    On Error GoTo errHandler
    
    Dim Site As Variant
    Dim JobName As String
    
    Dim tempPG_Dspwave_AfterDVS As New DSPWave
    Dim tempLocalDspwave As New DSPWave
    Dim postpatDspwave As New DSPWave
    Dim idx_Module As Long
    Dim i As Long
    
    
    JobName = TheExec.CurrentJob
    If InStr(1, JobName, "CPB") > 1 And InStr(1, JobName, "_L40C") > 1 Then
        For Each Site In TheExec.Sites
            If Floor(inSortNumber_lng / 1000) = 5 And glb_UpdateBinNumerAfterDVSDone_sbool = False Then
                If TheExec.Sites(Site).FlagState("DVS_FALG_ZORE") = logicTrue Then
                    
                    'lock the first sort bin number in postDVS
                    If glb_PG_DVSFirstFail_Flag_SBool = False Then
                        postpatDspwave = inLocalDspwave.Copy
                        postpatDspwave = postpatDspwave.Select(0, 1, glb_Module_Count + 1)
                        If postpatDspwave.CountElements(EqualTo, 0) > 0 Then   ''means more than one module failed
                            glb_PG_DVSFirstFail_Flag_SBool = True
                            glb_PG_DVS_FisrtFail_SortNum_SLng = inSortNumber_lng
                            glb_PG_DVS_FisrtFail_BinNum_SLng = Floor(inSortNumber_lng / 1000)
                        End If
                    End If
                        
                     tempPG_Dspwave_AfterDVS = inLocalDspwave.Copy
                    tempPG_Dspwave_AfterDVS = tempPG_Dspwave_AfterDVS.Select(0, 1, glb_Module_Count)
                    

                    glb_ModuleFailCount_AfterDVS_slng = glb_ModuleFailCount_AfterDVS_slng + tempPG_Dspwave_AfterDVS.CountElements(EqualTo, 0)

                    'when the PG module fail count increased in postDVS larger than FailCount_BeforeDVS, means there must be some module failed because of DVS, then bin the first fail in postDVS
                    If glb_ModuleFailCount_AfterDVS_slng > glb_ModuleFailCount_BeforeDVS_slng Then
                        glb_PGFisrtFail_BinNum_SLng = glb_PG_DVS_FisrtFail_BinNum_SLng
                        glb_PGFisrtFail_SortNum_SLng = glb_PG_DVS_FisrtFail_SortNum_SLng
                        glb_UpdateBinNumerAfterDVSDone_sbool = True
                    End If
                Else
                    Err.Raise " DVS Logic Error: When Hard Bin5, DVS_FALG_ZORE should be True! "
                End If
            End If
        Next Site
    End If
    
    Exit Function
errHandler:
    If AbortTest Then Exit Function Else Resume Next
End Function

''''''''''For DVS FLOW Only
'''Public Function PG_DFTRetestAfterDVS_Done()
''''This function will be executed after bin5 tests are finished
'''Dim site As Variant
'''For Each site In TheExec.Sites
'''    glb_DFTRetestAfterDVS_sbool = False
'''Next site
'''End Function

Public Function PG_PreJudge(PatName As Pattern, _
                            Optional FlowTempFlag As String = "RT|HT|LT", _
                            Optional FlowFuncFlag As String = "FT|CP", _
                            Optional FlowFuncPart As String = "NA|A|B|C|D|E|Z", _
                            Optional FlowIsAVS As Boolean = False, _
                            Optional PreCheck_FlowTempFlag As String = "RT|HT|LT|NA", _
                            Optional PreCheck_FlowFuncFlag As String = "FT|CP|QA|OR|NA", _
                            Optional PreCheck_FlowFuncPart As String = "NA|A|B|C|D|E|Z", _
                            Optional PreCheck_FlowIsAVS As Boolean = False, _
                            Optional CheckPG As PFType, _
                            Optional ConnectAllPins As Boolean = True, _
                            Optional LoadLevels As Boolean = True, _
                            Optional LoadTiming As Boolean = True, _
                            Optional RelayMode As tlRelayMode = 1, _
                            Optional InitWaitTime As Double = 0, _
                            Optional Exec_Mode As Exec_Modes, _
                            Optional DriveLoPins As PinList, Optional DriveHiPins As PinList, Optional DriveZPins As PinList, _
                            Optional FloatPins As PinList, _
                            Optional util1Pins As PinList, Optional util0Pins As PinList) As Long


    On Error GoTo errHandler
    
    If glb_IsPGInfoLoaded_Bool = False Then
        Call Initialize_PG_Info
    End If

    Dim Idx As Long
    Dim idx_Module As Long
    
    Dim Site As Variant
    
'*************************************************************************************************
'*****Step1:Value inital for Global Variables*****************************************************
'*************************************************************************************************
    For Each Site In TheExec.Sites
        glb_PG_GRD_Sdbl = 0
        glb_PWR_GRD_Sdbl = 0
        glb_PGFirstFail_Flag_SBool = False
        glb_PGFirstFail_UpdateDone_SBool = False
        glb_BinOut_Enable = False
        glb_PGFisrtFail_BinNum_SLng = -9999
        glb_PGFisrtFail_SortNum_SLng = -9999
        glb_UpdateBinNumerAfterDVSDone_sbool = False
        'glb_DFTRetestAfterDVS_sbool = False
        glb_ModuleFailCount_BeforeDVS_slng = 0
        glb_ModuleFailCount_AfterDVS_slng = 0
        glb_PG_DVSFirstFail_Flag_SBool = False
        glb_PG_DVS_FisrtFail_BinNum_SLng = -9999
        glb_PG_DVS_FisrtFail_SortNum_SLng = -9999
        AVS_Enable = False
        PG_Judge_Slng = 0
    Next Site
    
    
'*************************************************************************************************
'*****Step2:Construct Current\PreCheck Flow PG Efuse Pass Flag Item Name *************************
'*************************************************************************************************
    CurrentFlowPGPassFlag.cItemName = "PG_PASS_FLAG_" & FlowTempFlag
     
    If FlowFuncPart = "NA" Then
        CurrentFlowPGPassFlag.cItemName = CurrentFlowPGPassFlag.cItemName & "_" & FlowFuncFlag
    Else
        CurrentFlowPGPassFlag.cItemName = CurrentFlowPGPassFlag.cItemName & "_" & FlowFuncFlag & FlowFuncPart
    End If
    
    If PreCheck_FlowTempFlag = "NA" And PreCheck_FlowFuncFlag = "NA" And PreCheck_FlowFuncPart = "NA" Then
        
        If glb_PG_DebugMode = True Then
            TheExec.Datalog.WriteComment " No Precheck Flow,PreCheckFlowPG Pass Flag doesn't exist"
        End If
    Else
        PreCheckFlowPGPassFlag.cItemName = "PG_PASS_FLAG_" & PreCheck_FlowTempFlag

        If PreCheck_FlowFuncPart = "NA" Then
            PreCheckFlowPGPassFlag.cItemName = PreCheckFlowPGPassFlag.cItemName & "_" & PreCheck_FlowFuncFlag
        Else
            PreCheckFlowPGPassFlag.cItemName = PreCheckFlowPGPassFlag.cItemName & "_" & PreCheck_FlowFuncFlag & PreCheck_FlowFuncPart
        End If
    End If
    
    
    Dim ModuleList_Str() As String
    ModuleList_Str = Split(USER_DEFINE_MODULENAME, "/")
    ReDim FlowModuleFlag(glb_Module_Count - 1)
    
'*************************************************************************************************
'*****Step2:Construct Current\PreCheck Flow Module Efuse Pass Flag Item Name *********************
'*************************************************************************************************
    If FlowIsAVS = True Then     ''means current flow is AVS flow, need two groups of Pass Flag(LP\HP)
        ReDim CurrentFlowModulePassFlag(glb_Module_Count * 2 - 1)
        For Idx = 0 To glb_Module_Count - 1
            CurrentFlowModulePassFlag(Idx).cItemName = ModuleList_Str(Idx) & "_" & MID(CurrentFlowPGPassFlag.cItemName, 4) & "_LP"
            TheExec.Flow.TestLimit ResultVal:=0, lowVal:=0, hiVal:=1, PinName:=CurrentFlowModulePassFlag(Idx).cItemName, ForceResults:=tlForceNone, TName:="CurrentFlowModulePassFlag"
            CurrentFlowModulePassFlag(Idx + glb_Module_Count).cItemName = ModuleList_Str(Idx) & "_" & MID(CurrentFlowPGPassFlag.cItemName, 4) & "_HP"
            TheExec.Flow.TestLimit ResultVal:=0, lowVal:=0, hiVal:=1, PinName:=CurrentFlowModulePassFlag(Idx + glb_Module_Count).cItemName, ForceResults:=tlForceNone, TName:="CurrentFlowModulePassFlag"
        Next Idx
    Else                        ''means current flow is None AVS flow, need one group of Pass Flag
       ReDim CurrentFlowModulePassFlag(glb_Module_Count - 1)
       For Idx = 0 To glb_Module_Count - 1
            CurrentFlowModulePassFlag(Idx).cItemName = ModuleList_Str(Idx) & "_" & MID(CurrentFlowPGPassFlag.cItemName, 4)
            TheExec.Flow.TestLimit ResultVal:=0, lowVal:=0, hiVal:=1, PinName:=CurrentFlowModulePassFlag(Idx).cItemName, ForceResults:=tlForceNone, TName:="CurrentFlowModulePassFlag"
        Next Idx
    End If
    
    
    If PreCheck_FlowTempFlag = "NA" And PreCheck_FlowFuncFlag = "NA" And PreCheck_FlowFuncPart = "NA" Then
        
        If glb_PG_DebugMode = True Then
            TheExec.Datalog.WriteComment " No Precheck Flow,PreCheckFlow Module Pass Flag doesn't exist"
        End If
    Else
        If PreCheck_FlowIsAVS = True Then  ''means precheck flow is AVS flow, need two groups of Pass Flag(LP\HP)
            ReDim PreCheckFlowModulePassFlag(glb_Module_Count * 2 - 1)
            For Idx = 0 To glb_Module_Count - 1
                PreCheckFlowModulePassFlag(Idx).cItemName = ModuleList_Str(Idx) & "_" & MID(PreCheckFlowPGPassFlag.cItemName, 4) & "_LP"
                PreCheckFlowModulePassFlag(Idx + glb_Module_Count).cItemName = ModuleList_Str(Idx) & "_" & MID(PreCheckFlowPGPassFlag.cItemName, 4) & "_HP"
            Next Idx
        Else                                ''means current flow is None AVS flow, need one group of Pass Flag
            ReDim PreCheckFlowModulePassFlag(glb_Module_Count - 1)
            For Idx = 0 To glb_Module_Count - 1
                PreCheckFlowModulePassFlag(Idx).cItemName = ModuleList_Str(Idx) & "_" & MID(PreCheckFlowPGPassFlag.cItemName, 4)
            Next Idx
        End If
    End If
    
    ''Construct Flow Module Flag Name
    For Idx = 0 To glb_Module_Count - 1
       FlowModuleFlag(Idx).cItemName = ModuleList_Str(Idx) & "_Flow_Flag"
    Next Idx
    
    
'*************************************************************************************************
'*****Step3:Set Flow Module Flag Value accroding to PreCheck Flow Result**************************
'*************************************************************************************************

    If PreCheck_FlowTempFlag = "NA" And PreCheck_FlowFuncFlag = "NA" And PreCheck_FlowFuncPart = "NA" Then
        
        '''if no precheck flow, set all FlowModule flag=1
        For idx_Module = 0 To glb_Module_Count - 1
            FlowModuleFlag(idx_Module).iValue = 1
            TheExec.Flow.TestLimit ResultVal:=FlowModuleFlag(idx_Module).iValue, lowVal:=0, hiVal:=1, PinName:=FlowModuleFlag(idx_Module).cItemName, ForceResults:=tlForceNone, TName:="FlowModuleFlag"
        Next idx_Module
     
    ElseIf PreCheck_FlowIsAVS = True Then
        '''if precheck flow is AVS Flow, Flow Module Flag value should be the or result of AVS_LP and AVS_HP result
            For Each Site In TheExec.Sites
        
                PreCheckFlowPGPassFlag.iValue = HiEfuse.GET_MULT_EFUSE_ITEM_CODE_RD(PreCheckFlowPGPassFlag.cItemName, 0, Site)
                TheExec.Flow.TestLimit ResultVal:=PreCheckFlowPGPassFlag.iValue, lowVal:=1, hiVal:=1, PinName:=PreCheckFlowPGPassFlag.cItemName, ForceResults:=tlForceNone, TName:="PreCheckFlowPGPassFlag"
                If PreCheckFlowPGPassFlag.iValue = 0 Then
                    For idx_Module = 0 To glb_Module_Count - 1
                        PreCheckFlowModulePassFlag(idx_Module).iValue = HiEfuse.GET_MULT_EFUSE_ITEM_CODE_RD(PreCheckFlowModulePassFlag(idx_Module).cItemName, 0, Site)
                        TheExec.Flow.TestLimit ResultVal:=PreCheckFlowModulePassFlag(idx_Module).iValue, lowVal:=0, hiVal:=1, PinName:=PreCheckFlowModulePassFlag(idx_Module).cItemName, ForceResults:=tlForceNone, TName:="PreCheckFlowModulePassFlag"
                        PreCheckFlowModulePassFlag(idx_Module + glb_Module_Count).iValue = HiEfuse.GET_MULT_EFUSE_ITEM_CODE_RD(PreCheckFlowModulePassFlag(idx_Module + glb_Module_Count).cItemName, 0, Site)
                        TheExec.Flow.TestLimit ResultVal:=PreCheckFlowModulePassFlag(idx_Module + glb_Module_Count).iValue, lowVal:=0, hiVal:=1, PinName:=PreCheckFlowModulePassFlag(idx_Module + glb_Module_Count).cItemName, ForceResults:=tlForceNone, TName:="PreCheckFlowModulePassFlag"
                        FlowModuleFlag(idx_Module).iValue = 1
                        TheExec.Flow.TestLimit ResultVal:=FlowModuleFlag(idx_Module).iValue, lowVal:=0, hiVal:=1, PinName:=FlowModuleFlag(idx_Module).cItemName, ForceResults:=tlForceNone, TName:="FlowModuleFlag"
                    Next idx_Module
                Else
                    For idx_Module = 0 To glb_Module_Count - 1
                        PreCheckFlowModulePassFlag(idx_Module).iValue = HiEfuse.GET_MULT_EFUSE_ITEM_CODE_RD(PreCheckFlowModulePassFlag(idx_Module).cItemName, 0, Site)
                        TheExec.Flow.TestLimit ResultVal:=PreCheckFlowModulePassFlag(idx_Module).iValue, lowVal:=0, hiVal:=1, PinName:=PreCheckFlowModulePassFlag(idx_Module).cItemName, ForceResults:=tlForceNone, TName:="PreCheckFlowModulePassFlag"
                        PreCheckFlowModulePassFlag(idx_Module + glb_Module_Count).iValue = HiEfuse.GET_MULT_EFUSE_ITEM_CODE_RD(PreCheckFlowModulePassFlag(idx_Module + glb_Module_Count).cItemName, 0, Site)
                        TheExec.Flow.TestLimit ResultVal:=PreCheckFlowModulePassFlag(idx_Module + glb_Module_Count).iValue, lowVal:=0, hiVal:=1, PinName:=PreCheckFlowModulePassFlag(idx_Module + glb_Module_Count).cItemName, ForceResults:=tlForceNone, TName:="PreCheckFlowModulePassFlag"
                        FlowModuleFlag(idx_Module).iValue = PreCheckFlowModulePassFlag(idx_Module).iValue Or PreCheckFlowModulePassFlag(idx_Module + glb_Module_Count).iValue
                        TheExec.Flow.TestLimit ResultVal:=FlowModuleFlag(idx_Module).iValue, lowVal:=0, hiVal:=1, PinName:=FlowModuleFlag(idx_Module).cItemName, ForceResults:=tlForceNone, TName:="FlowModuleFlag"
                    Next idx_Module
                End If
            Next Site
    Else
        '''if precheck flow is None AVS Flow, Flow Module Flag value should be the or result of precheck flow result
        For Each Site In TheExec.Sites
        
            PreCheckFlowPGPassFlag.iValue = HiEfuse.GET_MULT_EFUSE_ITEM_CODE_RD(PreCheckFlowPGPassFlag.cItemName, 0, Site)
            TheExec.Flow.TestLimit ResultVal:=PreCheckFlowPGPassFlag.iValue, lowVal:=1, hiVal:=1, PinName:=PreCheckFlowPGPassFlag.cItemName, ForceResults:=tlForceNone, TName:="PreCheckFlowPGPassFlag"
            If PreCheckFlowPGPassFlag.iValue = 0 Then
                For idx_Module = 0 To glb_Module_Count - 1
                    PreCheckFlowModulePassFlag(idx_Module).iValue = HiEfuse.GET_MULT_EFUSE_ITEM_CODE_RD(PreCheckFlowModulePassFlag(idx_Module).cItemName, 0, Site)
                    TheExec.Flow.TestLimit ResultVal:=PreCheckFlowModulePassFlag(idx_Module).iValue, lowVal:=0, hiVal:=1, PinName:=PreCheckFlowModulePassFlag(idx_Module).cItemName, ForceResults:=tlForceNone, TName:="PreCheckFlowModulePassFlag"
                    FlowModuleFlag(idx_Module).iValue = 1
                    TheExec.Flow.TestLimit ResultVal:=FlowModuleFlag(idx_Module).iValue, lowVal:=0, hiVal:=1, PinName:=FlowModuleFlag(idx_Module).cItemName, ForceResults:=tlForceNone, TName:="FlowModuleFlag"
                Next idx_Module
            Else
                For idx_Module = 0 To glb_Module_Count - 1
                    PreCheckFlowModulePassFlag(idx_Module).iValue = HiEfuse.GET_MULT_EFUSE_ITEM_CODE_RD(PreCheckFlowModulePassFlag(idx_Module).cItemName, 0, Site)
                    TheExec.Flow.TestLimit ResultVal:=PreCheckFlowModulePassFlag(idx_Module).iValue, lowVal:=0, hiVal:=1, PinName:=PreCheckFlowModulePassFlag(idx_Module).cItemName, ForceResults:=tlForceNone, TName:="PreCheckFlowModulePassFlag"
                    FlowModuleFlag(idx_Module).iValue = PreCheckFlowModulePassFlag(idx_Module).iValue
                    TheExec.Flow.TestLimit ResultVal:=FlowModuleFlag(idx_Module).iValue, lowVal:=0, hiVal:=1, PinName:=FlowModuleFlag(idx_Module).cItemName, ForceResults:=tlForceNone, TName:="FlowModuleFlag"
                Next idx_Module
            End If
        Next Site
    End If
    
    '''create dummy space,size=glb_Module_Count+2,because there is one element for other moudle and one element for TestNum
    Set glb_PG_FlowResult_Dspwave = New DSPWave
    Set glb_PG_FlowResult_AVS_Dspwave = New DSPWave
    glb_PG_FlowResult_Dspwave.CreateConstant -1, glb_Module_Count + 2, DspLong
    glb_PG_FlowResult_AVS_Dspwave.CreateConstant -1, (glb_Module_Count + 2) * 2, DspLong
    

    Exit Function
errHandler:
    If AbortTest Then Exit Function Else Resume Next

End Function
